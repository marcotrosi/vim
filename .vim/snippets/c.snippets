snippet main
	int main(void)
	{
		${1}
		return 0;
	}
snippet Main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet inc
	#include "${1:`Filename("$1.h")`}"${2}
snippet Inc
	#include <${1:stdio}.h>${2}
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define 
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet incg
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
snippet if
	if (${1:/* condition */})
	{
		${2:/* code */}
	}
snippet el
	else
	{
		${1}
	}
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
snippet do
	do
	{
		${2:/* code */}
	} while (${1:/* condition */});
snippet wh
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
	{
		${5:/* code */}
	}
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
snippet fund
	${1:void} ${2:function_name}(${3});${4}
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
snippet st
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	}${3: /* optional variable list */};${4}
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet tde
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
snippet pri
	printf("${1:%s}\n"${2});${3}
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}

# vim: fdm=marker fmr=<<<,>>>
